
from pydantic import BaseModel, Field
from typing import Optional, List, Any

class FieldsModel(BaseModel):
    id: Optional[int] = Field(None, title="ID", description="")
    name: str = Field("", title="Field Name", description="")
    model: str = Field("", title="Model Name", description="The technical name of the model this field belongs to")
    field_description: str = Field("", title="Field Label", description="")
    ttype: Any = Field(None, title="Field Type", description="")
    state: Any = Field(None, title="Type", description="")
    relation_field_id: Optional[int] = Field(None, title="Relation field", description="")
    model_id: int = Field(0, title="Model", description="The model this field belongs to")
    related_field_id: Optional[int] = Field(None, title="Related field", description="")
    selection_ids: Optional[List[int]] = Field(None, title="Selection Options", description="")
    complete_name: Optional[str] = Field(None, title="Complete Name", description="")
    relation: Optional[str] = Field(None, title="Related Model", description="For relationship fields, the technical name of the target model")
    relation_field: Optional[str] = Field(None, title="Relation Field", description="For one2many fields, the field on the target model that implement the opposite many2one relationship")
    help: Optional[Any] = Field(None, title="Field Help", description="")
    selection: Optional[str] = Field(None, title="Selection Options (Deprecated)", description="")
    copied: Optional[bool] = Field(None, title="Copied", description="Whether the value is copied when duplicating a record.")
    related: Optional[str] = Field(None, title="Related Field", description="The corresponding related field, if any. This must be a dot-separated list of field names.")
    required: Optional[bool] = Field(None, title="Required", description="")
    readonly: Optional[bool] = Field(None, title="Readonly", description="")
    index: Optional[bool] = Field(None, title="Indexed", description="")
    translate: Optional[bool] = Field(None, title="Translatable", description="Whether values for this field can be translated (enables the translation mechanism for that field)")
    size: Optional[int] = Field(None, title="Size", description="")
    on_delete: Optional[Any] = Field(None, title="On Delete", description="On delete property for many2one fields")
    domain: Optional[str] = Field(None, title="Domain", description="The optional domain to restrict possible values for relationship fields, specified as a Python expression defining a list of triplets. For example: [('color','=','red')]")
    groups: Optional[List[int]] = Field(None, title="Groups", description="")
    group_expand: Optional[bool] = Field(None, title="Expand Groups", description="If checked, all the records of the target model will be included\nin a grouped result (e.g. 'Group By' filters, Kanban columns, etc.).\nNote that it can significantly reduce performance if the target model\nof the field contains a lot of records; usually used on models with\nfew records (e.g. Stages, Job Positions, Event Types, etc.).")
    selectable: Optional[bool] = Field(None, title="Selectable", description="")
    modules: Optional[str] = Field(None, title="In Apps", description="List of modules in which the field is defined")
    relation_table: Optional[str] = Field(None, title="Relation Table", description="Used for custom many2many fields to define a custom relation table name")
    column1: Optional[str] = Field(None, title="Column 1", description="Column referring to the record in the model table")
    column2: Optional[str] = Field(None, title="Column 2", description="Column referring to the record in the comodel table")
    compute: Optional[Any] = Field(None, title="Compute", description="Code to compute the value of the field.\nIterate on the recordset 'self' and assign the field's value:\n\n    for record in self:\n        record['size'] = len(record.name)\n\nModules time, datetime, dateutil are available.")
    depends: Optional[str] = Field(None, title="Dependencies", description="Dependencies of compute method; a list of comma-separated field names, like\n\n    name, partner_id.name")
    store: Optional[bool] = Field(None, title="Stored", description="Whether the value is stored in the database.")
    currency_field: Optional[str] = Field(None, title="Currency field", description="Name of the Many2one field holding the res.currency")
    sanitize: Optional[bool] = Field(None, title="Sanitize HTML", description="")
    sanitize_overridable: Optional[bool] = Field(None, title="Sanitize HTML overridable", description="")
    sanitize_tags: Optional[bool] = Field(None, title="Sanitize HTML Tags", description="")
    sanitize_attributes: Optional[bool] = Field(None, title="Sanitize HTML Attributes", description="")
    sanitize_style: Optional[bool] = Field(None, title="Sanitize HTML Style", description="")
    sanitize_form: Optional[bool] = Field(None, title="Sanitize HTML Form", description="")
    strip_style: Optional[bool] = Field(None, title="Strip Style Attribute", description="")
    strip_classes: Optional[bool] = Field(None, title="Strip Class Attribute", description="")
    display_name: Optional[str] = Field(None, title="Display Name", description="")
    create_uid: Optional[int] = Field(None, title="Created by", description="")
    create_date: Optional[str] = Field(None, title="Created on", description="")
    write_uid: Optional[int] = Field(None, title="Last Updated by", description="")
    write_date: Optional[str] = Field(None, title="Last Updated on", description="")
    tracking: Optional[int] = Field(None, title="Enable Ordered Tracking", description="If set every modification done to this field is tracked. Value is used to order tracking values.")
    website_form_blacklisted: Optional[bool] = Field(None, title="Blacklisted in web forms", description="Blacklist this field for web forms")

