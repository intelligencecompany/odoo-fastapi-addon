
from pydantic import BaseModel, Field
from typing import Optional, List, Any

class PaymentTransactionModel(BaseModel):
    id: Optional[int] = Field(None, title="ID", description="")
    reference: str = Field("", title="Reference", description="The internal reference of the transaction")
    amount: float = Field(0.0, title="Amount", description="")
    state: Any = Field(None, title="Status", description="")
    provider_id: int = Field(0, title="Provider", description="")
    company_id: Optional[int] = Field(None, title="Company", description="")
    payment_method_id: int = Field(0, title="Payment Method", description="")
    currency_id: int = Field(0, title="Currency", description="")
    token_id: Optional[int] = Field(None, title="Payment Token", description="")
    source_transaction_id: Optional[int] = Field(None, title="Source Transaction", description="The source transaction of the related child transactions")
    callback_model_id: Optional[int] = Field(None, title="Callback Document Model", description="")
    callback_res_id: Optional[int] = Field(None, title="Callback Record ID", description="")
    partner_id: int = Field(0, title="Customer", description="")
    partner_state_id: Optional[int] = Field(None, title="State", description="")
    partner_country_id: Optional[int] = Field(None, title="Country", description="")
    child_transaction_ids: Optional[List[int]] = Field(None, title="Child Transactions", description="The child transactions of the transaction.")
    provider_code: Optional[Any] = Field(None, title="Provider Code", description="The technical code of this payment provider.")
    payment_method_code: Optional[str] = Field(None, title="Payment Method Code", description="The technical code of this payment method.")
    provider_reference: Optional[str] = Field(None, title="Provider Reference", description="The provider reference of the transaction")
    state_message: Optional[Any] = Field(None, title="Message", description="The complementary information message about the state")
    last_state_change: Optional[str] = Field(None, title="Last State Change Date", description="")
    operation: Optional[Any] = Field(None, title="Operation", description="")
    refunds_count: Optional[int] = Field(None, title="Refunds Count", description="")
    is_post_processed: Optional[bool] = Field(None, title="Is Post-processed", description="Has the payment been post-processed")
    tokenize: Optional[bool] = Field(None, title="Create Token", description="Whether a payment token should be created when post-processing the transaction")
    landing_route: Optional[str] = Field(None, title="Landing Route", description="The route the user is redirected to after the transaction")
    callback_method: Optional[str] = Field(None, title="Callback Method", description="")
    callback_hash: Optional[str] = Field(None, title="Callback Hash", description="")
    callback_is_done: Optional[bool] = Field(None, title="Callback Done", description="Whether the callback has already been executed")
    partner_name: Optional[str] = Field(None, title="Partner Name", description="")
    partner_lang: Optional[Any] = Field(None, title="Language", description="")
    partner_email: Optional[str] = Field(None, title="Email", description="")
    partner_address: Optional[str] = Field(None, title="Address", description="")
    partner_zip: Optional[str] = Field(None, title="Zip", description="")
    partner_city: Optional[str] = Field(None, title="City", description="")
    partner_phone: Optional[str] = Field(None, title="Phone", description="")
    display_name: Optional[str] = Field(None, title="Display Name", description="")
    create_uid: Optional[int] = Field(None, title="Created by", description="")
    create_date: Optional[str] = Field(None, title="Created on", description="")
    write_uid: Optional[int] = Field(None, title="Last Updated by", description="")
    write_date: Optional[str] = Field(None, title="Last Updated on", description="")

